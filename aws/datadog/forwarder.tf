# ----------------------------------------------------------------------------------------------------------------------
# VARIABLES / LOCALS / REMOTE STATE
# ----------------------------------------------------------------------------------------------------------------------

variable "datadog_forwarder_version" {
  description = "Version of the Datadog forwarder to use"
  default     = ""
}

variable "datadog_cloudwatch_log_groups" {
  description = "A list of CloudWatch Log Groups to create for association with the Datadog lambda agent."
  type        = list(string)
  default     = []
}

variable "enable_termination_protection" {
  description = "Whether to enable termination protection for the forwarder stack"
  type        = bool
  default     = true
}

locals {
  datadog_forwarder_version = coalesce(var.datadog_forwarder_version, "latest")
}

# ----------------------------------------------------------------------------------------------------------------------
# MODULES / RESOURCES
# ----------------------------------------------------------------------------------------------------------------------

# Datadog Forwarder to ship logs from S3 and CloudWatch, as well as observability data from Lambda functions to Datadog.
# https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring
# Parameters:
#   DdApiKey:
#     Type: String
#     NoEcho: true
#     Default: ""
#     Description: The Datadog API key, which can be found from the APIs page (/account/settings#api). It will be stored in AWS Secrets Manager securely. If DdApiKeySecretArn is also set, this value is ignored.
#   DdApiKeySecretArn:
#     Type: String
#     AllowedPattern: "arn:.*:secretsmanager:.*"
#     Default: "arn:aws:secretsmanager:DEFAULT"
#     Description: The ARN of the secret storing the Datadog API key, if you already have it stored in Secrets Manager. You must store the secret as a plaintext, rather than a key-value pair.
#   DdSite:
#     Type: String
#     Default: datadoghq.com
#     Description: Define your Datadog Site to send data to. Possible values are `datadoghq.com`, `datadoghq.eu`, `us3.datadoghq.com` and `ddog-gov.com`.
#     AllowedPattern: .+
#     ConstraintDescription: DdSite is required
#   FunctionName:
#     Type: String
#     Default: DatadogForwarder
#     Description: The Datadog Forwarder Lambda function name. DO NOT change when updating an existing CloudFormation stack, otherwise the current forwarder function will be replaced and all the triggers will be lost.
#   MemorySize:
#     Type: Number
#     Default: 1024
#     MinValue: 128
#     MaxValue: 3008
#     Description: Memory size for the Datadog Forwarder Lambda function
#   Timeout:
#     Type: Number
#     Default: 120
#     Description: Timeout for the Datadog Forwarder Lambda function
#   TagsCacheTTLSeconds:
#     Type: Number
#     Default: 300
#     Description: TTL (in seconds) for the Datadog tags cache
#   ReservedConcurrency:
#     Type: Number
#     Default: 100
#     Description: Reserved concurrency for the Datadog Forwarder Lambda function
#   LogRetentionInDays:
#     Type: Number
#     Default: 90
#     Description: CloudWatch log retention for logs generated by the Datadog Forwarder Lambda function
#   SourceZipUrl:
#     Type: String
#     Default: ""
#     Description: DO NOT CHANGE unless you know what you are doing. Override the default location of the function source code.
#   InstallAsLayer:
#     Type: String
#     Default: true
#     Description: Whether to use the layer-based installation flow. Set to false to use our legacy installation flow, which installs a second function that copies the forwarder code from Github to an S3 bucket. Defaults to true.
#     AllowedValues:
#       - true
#       - false
#   LayerARN:
#     Type: String
#     Default: ""
#     Description: ARN for the layer containing the forwarder code. If empty, the script will use the version of the layer the forwarder was published with.
#   DdTags:
#     Type: String
#     Default: ""
#     Description: Add custom tags to forwarded logs, comma-delimited string, no trailing comma, e.g., env:prod,stack:classic
#   DdFetchLambdaTags:
#     Type: String
#     Default: true
#     AllowedValues:
#       - true
#       - false
#     Description: Let the forwarder fetch Lambda tags using GetResources API calls and apply them to logs, metrics and traces. If set to true, permission tag:GetResources will be automatically added to the Lambda execution IAM role. The tags are cached in memory so that they'll only be fetched when the function cold starts or when the TTL (1 hour) expires. The forwarder increments the aws.lambda.enhanced.get_resources_api_calls metric for each API call made.
#   DdUseTcp:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: By default, the forwarder sends logs using HTTPS through the port 443. To send logs over an SSL encrypted TCP connection, set this parameter to true.
#   DdNoSsl:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: Disable SSL when forwarding logs, set to true when forwarding logs through a proxy.
#   DdUrl:
#     Type: String
#     Default: ""
#     Description: The endpoint URL to forward the logs to, useful for forwarding logs through a proxy
#   DdPort:
#     Type: String
#     Default: ""
#     Description: The endpoint port to forward the logs to, useful for forwarding logs through a proxy
#   DdSkipSslValidation:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: Send logs over HTTPS, while NOT validating the certificate provided by the endpoint. This will still encrypt the traffic between the forwarder and the log intake endpoint, but will not verify if the destination SSL certificate is valid.
#   RedactIp:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: Replace text matching \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} with xxx.xxx.xxx.xxx
#   RedactEmail:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: Replace text matching [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+ with xxxxx@xxxxx.com
#   DdScrubbingRule:
#     Type: String
#     Default: ""
#     Description: Replace text matching the supplied regular expression with xxxxx (default) or DdScrubbingRuleReplacement (if supplied). Log scrubbing rule is applied to the full JSON-formatted log, including any metadata that is automatically added by the Lambda function. Each instance of a pattern match is replaced until no more matches are found in each log. Note, using inefficient regular expression, such as `.*`, may slow down the Lambda function.
#   DdScrubbingRuleReplacement:
#     Type: String
#     Default: ""
#     Description: Replace text matching DdScrubbingRule with the supplied text
#   ExcludeAtMatch:
#     Type: String
#     Default: ""
#     Description: DO NOT send logs matching the supplied regular expression. If a log matches both the ExcludeAtMatch and IncludeAtMatch, it is excluded. Filtering rules are applied to the full JSON-formatted log, including any metadata that is automatically added by the function. Note, using inefficient regular expression, such as `.*`, may slow down the Lambda function.
#   IncludeAtMatch:
#     Type: String
#     Default: ""
#     Description: Only send logs matching the supplied regular expression and not excluded by ExcludeAtMatch. Note, using inefficient regular expression, such as `.*`, may slow down the Lambda function.
#   DdMultilineLogRegexPattern:
#     Type: String
#     Default: ""
#     Description: Use the supplied regular expression to detect for a new log line for multiline logs from S3, e.g., use expression "\d{2}\/\d{2}\/\d{4}" for multiline logs beginning with pattern "11/10/2014".
#   DdForwardLog:
#     Type: String
#     Default: true
#     AllowedValues:
#       - true
#       - false
#     Description: Set to false to disable log forwarding, while continuing to forward other observability data, such as metrics and traces from Lambda functions.
#   DdUseCompression:
#     Type: String
#     Default: true
#     AllowedValues:
#       - true
#       - false
#     Description: Set to false to disable log compression. Only valid when sending logs over HTTP.
#   DdUsePrivateLink:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: Set to true to deploy the Forwarder to a VPC and send logs, metrics, and traces via AWS PrivateLink. When set to true, must also set VPCSecurityGroupIds and VPCSubnetIds. Find more details from https://dtdg.co/private-link.
#   DdUseVPC:
#     Type: String
#     Default: false
#     AllowedValues:
#       - true
#       - false
#     Description: Set to true to deploy the Forwarder to a VPC and send logs, metrics, and traces via a proxy. When set to true, must also set VPCSecurityGroupIds and VPCSubnetIds.
#   DdHttpProxyURL:
#     Type: String
#     Default: ""
#     Description: "Sets the standard web proxy environment variables HTTP_PROXY and HTTPS_PROXY. These are the url endpoints your proxy server exposes. Don't use this in combination with AWS Private Link. Make sure to also set DdSkipSslValidation to true."
#   DdNoProxy:
#     Type: String
#     Default: ""
#     Description: "Sets the standard web proxy environment variable NO_PROXY. It is a comma-separated list of domain names that should be excluded from the web proxy."
#   VPCSecurityGroupIds:
#     Type: CommaDelimitedList
#     Default: ""
#     Description: Comma separated list of VPC Security Group Ids. Used when DdUsePrivateLink or DdUseVPC is enabled.
#   VPCSubnetIds:
#     Type: CommaDelimitedList
#     Default: ""
#     Description: Comma separated list of VPC Subnet Ids. Used when DdUsePrivateLink or DdUseVPC is enabled.
#   DdCompressionLevel:
#     Type: Number
#     Default: 6
#     AllowedValues: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#     Description: Set the compression level from 0 (no compression) to 9 (best compression) when sending logs.
#   DdMaxWorkers:
#     Type: Number
#     Default: 20
#     Description: Set the max number of workers sending logs concurrently.
#   PermissionsBoundaryArn:
#     Type: String
#     Default: ""
#     Description: ARN for the Permissions Boundary Policy
#   AdditionalTargetLambdaArns:
#     Type: CommaDelimitedList
#     Default: ""
#     Description: Comma separated list of lambda ARNs that get invoked asynchronously with the same input event
#   DdApiUrl:
#     Type: String
#     Default: ""
#     Description: The endpoint URL to forward the metrics to, useful for forwarding metrics through a proxy
#   DdTraceIntakeUrl:
#     Type: String
#     Default: ""
#     Description: The endpoint URL to forward the traces to, useful for forwarding traces through a proxy
resource "aws_cloudformation_stack" "datadog_forwarder" {
  count = var.create ? 1 : 0
  name  = join("-", [local.module_prefix, "forwarder"])
  tags  = local.tags

  # https://datadog-cloudformation-template.s3.amazonaws.com/aws/forwarder/latest.yaml
  template_url = "https://datadog-cloudformation-template.s3.amazonaws.com/aws/forwarder/${local.datadog_forwarder_version}.yaml"
  capabilities = ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND"]
  parameters = {
    FunctionName      = join("-", [local.module_prefix, "forwarder"])
    DdApiKey          = "this_value_is_not_used"
    DdApiKeySecretArn = concat(aws_secretsmanager_secret.datadog_api_key.*.arn, [""])[0]
    DdTags            = join(",", local.datadog_aws_host_tags)
    # DdTags            = join(",", [for k, v in local.tags : format("%s:%s", k, v)])
    InstallAsLayer              = false
    EnableTerminationProtection = var.enable_termination_protection
  }

  depends_on = [aws_cloudformation_stack.datadog_integration]
  lifecycle {
    ignore_changes = [
      parameters["DdApiKey"]
    ]
  }
}

resource "aws_lambda_permission" "allow_cloudwatch" {
  count = var.create ? length(var.datadog_cloudwatch_log_groups) : 0

  # statement_id  = "${local.module_prefix}-allow-cloudwatch-${count.index}"
  action        = "lambda:InvokeFunction"
  function_name = concat(aws_cloudformation_stack.datadog_forwarder.*.outputs.DatadogForwarderArn, [join("-", [local.module_prefix, "forwarder"])])[0]
  principal     = "logs.${var.aws_region}.amazonaws.com"
  source_arn    = "arn:aws:logs:${var.aws_region}:${local.account_id}:log-group:${element(var.datadog_cloudwatch_log_groups, count.index)}:*"
}

resource "aws_cloudwatch_log_subscription_filter" "logging" {
  count = var.create ? length(var.datadog_cloudwatch_log_groups) : 0
  name  = join("-", [local.module_prefix, "forwarder", count.index])

  destination_arn = concat(aws_cloudformation_stack.datadog_forwarder.*.outputs.DatadogForwarderArn, [""])[0]
  log_group_name  = element(var.datadog_cloudwatch_log_groups, count.index)
  filter_pattern  = ""

  depends_on = [
    aws_cloudformation_stack.datadog_forwarder,
    aws_lambda_permission.allow_cloudwatch
  ]
}

# ----------------------------------------------------------------------------------------------------------------------
# OUTPUTS
# ----------------------------------------------------------------------------------------------------------------------

output "datadog_forwarder_arn" {
  value = concat(aws_cloudformation_stack.datadog_forwarder.*.outputs.DatadogForwarderArn, [""])[0]
}

output "datadog_cloudwatch_trigger_arns" {
  description = "ARNs of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN."
  value       = [for log_group_name in aws_cloudwatch_log_subscription_filter.logging.*.log_group_name : "arn:aws:logs:${var.aws_region}:${local.account_id}:log-group:${log_group_name}:*"]
}

